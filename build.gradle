buildscript {
    ext {
        springBootVersion = '1.5.2.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/"}

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'


jar {
    baseName = 'achivemrnt_sharing'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    //compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    //compile("org.springframework.boot:spring-boot-starter-data-jpa")

    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile('org.seasar.doma.boot:doma-spring-boot-starter:1.0.2')

    compile("mysql:mysql-connector-java")

    compile("org.projectlombok:lombok")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("com.h2database:h2")
    testCompile("junit:junit:4.12")


}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}


processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources


/*
node {
    version = '7.2.1'
    npmVersion = '3.10.10'
    download = true
    workDir = file("src/main/resources/jsbuild")
    nodeModulesDir = file("src/main/resources/jsbuild")
}

task jsBuild(type: NodeTask) {
    script = file("src/main/resources/jsbuild/webpack.config.production.js")
    args = ['run', 'build']
}

npm_install.dependsOn(npm_cache_clean)

classes.dependsOn jsBuild*/
